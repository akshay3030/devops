---
# Playbook to bringup an AWS EC2 Bastion

- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    keypair: "dev-bastion"
    instance_type: "t1.micro"
    image: "ami-408c7f28"
    region: "us-east-1"
    group: "development"
    count: 1

  tasks:
    - name: bringup ec2 instance
      ec2: image={{ image }}
           instance_type={{ instance_type }}
           keypair={{ keypair }}
           region={{ region }}
           group={{ group }}
           instance_tags='{"Name":"Development Bastion"}'
           count={{ count }}
           wait=true
      register: ec2_info

    - debug: var=ec2_info
    - debug: var=item
      with_items: ec2_info.instance_ids

    - name: add host info to in-memory inventory
      add_host: hostname={{ item.public_ip }} groupname=ec2hosts
      with_items: ec2_info.instances

    - name: wait for instances to listen on port:22
      wait_for:
        state=started
        host={{ item.public_dns_name }}
        port=22
      with_items: ec2_info.instances


- hosts: ec2hosts
  gather_facts: True
  remote_user: ubuntu
  sudo: yes

  tasks:

    # fetch instance data from the metadata servers in ec2
    - ec2_facts:

    - name: install required components on Debian
      apt: name={{ item }} state=latest update_cache=yes
      with_items:
        - gcc
        - make
        - python-dev
        - python-pip
        - python-psycopg2
        - openjdk-7-jdk
        - postgresql
      when: ansible_os_family == "Debian"
  
    - name: install fabric/ansible using pip
      pip: name={{ item }} state=latest 
      ignore_errors: yes
      with_items:
        - fabric
        - ansible    
  
    - debug: msg="{{ hostvars[inventory_hostname]['ansible_ec2_instance_id'] }}"
    - debug: msg="{{ hostvars[inventory_hostname]['ansible_ec2_public_hostname'] }}"
  
