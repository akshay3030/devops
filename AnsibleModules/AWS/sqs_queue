#! /usr/bin/python
import boto3
import shlex
import json
import sys

args_file = sys.argv[1]
args_data = file(args_file).read()

def dumpErrorInfo(dmsg, berr=True):
  
  print json.dumps(dmsg,
                   sort_keys=True,
                   indent=4,
                   separators=(',', ': ')
                  )

  if berr:
    sys.exit(1)
  else:
    sys.exit(0)
           
def deleteSQSQueue(name, url, region):
  '''
    Routine to delete a SQS queue.
  '''
  try:
    sqs = boto3.client('sqs', region)
    d = { "changed" : False, }

    if sqs:
      try:
        q  = sqs.list_queues(QueueNamePrefix=name)

        if q.has_key("QueueUrls"):
          if url in q["QueueUrls"]:

            try:
              sqs.delete_queue(QueueUrl=url)
              d["changed"] = True
              d["msg"] = "The %s queue deleted" % str(name)
              dumpErrorInfo(d, False)
            except Exception, e:
              dumpErrorInfo({
                             "failed" : True,
                             "msg" : "%s" % str(e)
                           })

        else:
          d["msg"] = "No %s queue present to delete" % str(name)
          dumpErrorInfo(d, False)

      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })

    else:
      dumpErrorInfo({
                     "failed" : True,
                     "msg" : "null sqs client object"
                   })   
                         
  except Exception, e:
    dumpErrorInfo({
                   "failed" : True,
                   "msg" : "%s" % str(e)
                 })   

def createSQSQueue(name, region, atrbts):
  '''
    Routine to create a SQS queue.
  '''
  try:
    sqs = boto3.client('sqs', region)
    d = { "changed" : False, }

    if sqs:
      try:
        q = sqs.create_queue(QueueName=name, Attributes=atrbts)
        d["url"] = q["QueueUrl"]
        d["changed"] = True

        try:
          a = sqs.get_queue_attributes(QueueUrl=d["url"], AttributeNames=["QueueArn"])
          d["arn"] = a["Attributes"]["QueueArn"]
          d["name"] = name
          dumpErrorInfo(d, False)

        except Exception, e:
          dumpErrorInfo({
                         "failed" : True,
                         "msg" : "%s" % str(e)
                       })

      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })

    else:
      dumpErrorInfo({
                     "failed" : True,
                     "msg" : "null sqs client object"
                   })   
      

  except Exception, e:
    dumpErrorInfo({
                   "failed" : True,
                   "msg" : "%s" % str(e)
                 })

def dumpSQSQueue(name, region):
  '''
    Routine to dump a SQS queue url and arn.
  '''
  try:
    sqs = boto3.client('sqs', region)
    d = { "changed" : False, }

    if sqs:
      try:
        u = sqs.get_queue_url(QueueName=name)
        if u.has_key("QueueUrl"):
          d["url"] = u["QueueUrl"]

      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })

      try:
        a = sqs.get_queue_attributes(QueueUrl=d["url"], AttributeNames=["QueueArn"])
        d["arn"] = a["Attributes"]["QueueArn"]
        d["name"] = name
        dumpErrorInfo(d, False)

      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })

    else:
      dumpErrorInfo({
                     "failed" : True,
                     "msg" : "null sqs client object"
                   })   

  except Exception, e:
    dumpErrorInfo({
                   "failed" : True,
                   "msg" : "%s" % str(e)
                 })

def rdrvplcySQSQueue(name, dlqarn, mrc, region):
  '''
    Routine to set redrive policy for a SQS queue.
  '''
  try:
    sqs = boto3.client('sqs', region)
    d = { "changed" : False, }

    if sqs:
      try:
        u = sqs.get_queue_url(QueueName=name)
        if u.has_key("QueueUrl"):
          url = u["QueueUrl"]
        else:
          dumpErrorInfo({
                         "failed" : True,
                         "msg" : "Can not get url for %s" %name
                       })

      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })

      try:
        sqs.set_queue_attributes(
          QueueUrl=url,
          Attributes={
            "RedrivePolicy": "{\"maxReceiveCount\":\"%s\",\"deadLetterTargetArn\":\"%s\"}" %(mrc,dlqarn)
          }
        )
        d["changed"] = True
        d["msg"] = "RedrivePolicy configured for %s" %name
        dumpErrorInfo(d, False)

      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })

    else:
      dumpErrorInfo({
                     "failed" : True,
                     "msg" : "null sqs client object"
                   })

  except Exception, e:
    dumpErrorInfo({
                   "failed" : True,
                   "msg" : "%s" % str(e)
                 })

def delCrteSQSQueue():
  '''
    Routine to create or delete a SQS queue.
  '''
  if not "name=" in args_data:
    dumpErrorInfo({
                  "failed" : True,
                  "msg" : "name is the required argument"
                 })

  if not "region=" in args_data:
    dumpErrorInfo({
                  "failed" : True,
                  "msg" : "region is the required argument"
                 })

  if not "state=" in args_data:
    dumpErrorInfo({
                  "failed" : True,
                  "msg" : "state is the required argument"
                 })
  else:
    if "state=absent" in args_data:
      if not "url=" in args_data:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "url is the required argument"
                     })

    elif "state=rdrvplcy" in args_data:
      if not "dlqarn" in args_data:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "dlqarn is the required argument"
                     })

      if not "mrc" in args_data:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "mrc is the required argument"
                     })

  arguments = shlex.split(args_data)

  a = {}
  for arg in arguments:
    # ignore any arguments without an equals in it
    if "=" in arg:
        (key, value) = arg.split("=")

        if key == "name":
          name = value
        elif key == "region":
          region = value
        elif key == "state":
          state = value
        elif key == "url":
          url = value
        elif key == "rmwt":
          a["ReceiveMessageWaitTimeSeconds"] = value
        elif key == "rprd":
          a["MessageRetentionPeriod"] = value
        elif key == "dvto":
          a["VisibilityTimeout"] = value
        elif key == "dlqarn":
          dlqarn = value
        elif key == "mrc":
          mrc = value
        
  if state == "dump":
    dumpSQSQueue(name, region)
  if state == "present":
    createSQSQueue(name, region, a)
  if state == "absent":
    deleteSQSQueue(name, url, region)
  if state == "rdrvplcy":
    rdrvplcySQSQueue(name, dlqarn, mrc, region)
  
delCrteSQSQueue()
