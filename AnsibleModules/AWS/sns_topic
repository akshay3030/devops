#! /usr/bin/python
import boto3
import shlex
import json
import sys

args_file = sys.argv[1]
args_data = file(args_file).read()

def dumpErrorInfo(dmsg, berr=True):
  
  print json.dumps(dmsg,
                   sort_keys=True,
                   indent=4,
                   separators=(',', ': ')
                  )

  if berr:
    sys.exit(1)
  else:
    sys.exit(0)
           
def deleteSNSTopic(arn, region):
  '''
    Routine to delete a SNS topic.
  '''
  try:
    clnt = boto3.client('sns', region)
    d = { "changed" : False, }
    if clnt:
      try:
        clnt.delete_topic(TopicArn=arn)
        d["changed"] = True
        d["msg"] = "The %s topic deleted" % str(arn)
        dumpErrorInfo(d, False)
      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })
    else:
      dumpErrorInfo({
                     "failed" : True,
                     "msg" : "null sns client object"
                   })
                         
  except Exception, e:
    dumpErrorInfo({
                   "failed" : True,
                   "msg" : "%s" % str(e)
                 })   

def createSNSTopic(name, region):
  '''
    Routine to create a SNS topic.
  '''
  try:
    sns = boto3.resource('sns', region)
    d = { "changed" : False, }
    if sns:
      try:
        tpc = sns.create_topic(Name=name)
        if tpc:
          d["changed"] = True
          d["arn"] = tpc.arn
          d["name"] = name
          dumpErrorInfo(d, False)
        else:
          dumpErrorInfo({
                         "failed" : True,
                         "msg" : "null sns topic object"
                       })
          
      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })
      
    else:
      dumpErrorInfo({
                     "failed" : True,
                     "msg" : "null sns resource object"
                   })
  except Exception, e:
    dumpErrorInfo({
                   "failed" : True,
                   "msg" : "%s" % str(e)
                 })

def subsSNSTopic(tpcarn, qarn, region):
  '''
    Routine to subscribe a SQS queue to a SNS topic.
  '''
  pass


def dumpSNSTopic(name, region):
  '''
    Routine to dump arn for a SNS topic.
  '''
  try:
    sns = boto3.client('sns', region)
    d = { "changed" : False, }
    if sns:
      try:
        r = sns.list_topics()
        for a in r["Topics"]:
          if -1 != a["TopicArn"].find(name):
            d["arn"] = a["TopicArn"]
            d["name"] = name
            dumpErrorInfo(d, False)

      except Exception, e:
        dumpErrorInfo({
                       "failed" : True,
                       "msg" : "%s" % str(e)
                     })
      
    else:
      dumpErrorInfo({
                     "failed" : True,
                     "msg" : "null sns resource object"
                   })
        
  except Exception, e:
    dumpErrorInfo({
                   "failed" : True,
                   "msg" : "%s" % str(e)
                 })

def delCrteSNSTopic():
  '''
    Routine to create or delete a SNS topic.
  '''
  if not "region=" in args_data:
    dumpErrorInfo({
                  "failed" : True,
                  "msg" : "region is the required argument"
                 })

  if not "state=" in args_data:
    dumpErrorInfo({
                  "failed" : True,
                  "msg" : "state is the required argument"
                 })
  else:
    if "state=present" in args_data:
      if not "name=" in args_data:
        dumpErrorInfo({
                      "failed" : True,
                      "msg" : "name is the required argument"
                     })
    elif "state=absent" in args_data:
      if not "arn=" in args_data:
        dumpErrorInfo({
                      "failed" : True,
                      "msg" : "arn is the required argument"
                     })

  arguments = shlex.split(args_data)

  for arg in arguments:
    # ignore any arguments without an equals in it
    if "=" in arg:
      (key, value) = arg.split("=")

      if key == "arn":
        arn = value
      elif key == "name":
        name = value
      elif key == "region":
        region = value
      elif key == "state":
        state = value
        
  if state == "dump":
    dumpSNSTopic(name, region)
  if state == "present":
    createSNSTopic(name, region)
  if state == "absent":
    deleteSNSTopic(arn, region)

delCrteSNSTopic()
